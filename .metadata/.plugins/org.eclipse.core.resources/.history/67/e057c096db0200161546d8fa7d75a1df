/* 주제 : 컬럼의 타입 */



1. char(n) 타입의 특징
=> n은 컬럼의 고정 크기
=> 문자열을 넣을 때 최대 n개수를 넣을 수 있다.
=> 
 drop table test01;
 create table test01 ( 
 tno int primary key,
 name char(5) default '홍길동',
 email char(20) unique
);













/* 컬럼을 지정하지 않는 경우.
 * create table에 선언된 순서대로 모든 컬럼의 값을 지정해야한다. */
insert into test01 value(1,'hong');
/* 순서대로 안하면 tno 값이 0이된다 */

/* 정상 저장. */
insert into test01 value(2,'park');

insert into test01 value(3);
/* 오류 뜸.*/

/* 특정 컬럼의 값 입력을 생략한 경우.
 *  => null값으로 설정된다..
 */
insert into test01(name) values('홍길동');
insert into test01(tno) values(3);


3. 특정 컬럼을 필수 입력 컬럼으로 만드는 방법.
ex) name 컬럼을 필수 입력 컬럼으로 만든다.
=> mySQL의 경우 not null 컬럼의 값을 생략하면 그 타입의 기본값이 저장된다.
 int ==> 0 / char ==> 빈문자열
 
 
create table test01 ( 
 tno int, 
 name char(5) not null
);



insert into test01(tno, name) values(1, '홍길동');
insert into test01(tno, name) values(1, '임꺽정');
4. 특정 컬럼의 값이 중복되지 않게 만드는 방법.
=> unique 옵션을 붙인다.
=> 값이 중복되면 오류 발생. 값이 없으면 중복 여부를 검사하지 않는다. 
=> mysql은 null 이 값이 없는것으로 판단되어 중복이 아니다.

create table test01 ( 
 tno int unique,
 name char(5) not null
);


insert into test01(name) value('hong');

insert into test01(name,tno) value('park',2);
insert into test01(name,tno) value('lee',3);
insert into test01(name,tno) value('kim',4);
insert into test01(name,tno) value('cho',5);
insert into test01(name,tno) value('choi',6);


5. 특정 컬럼의 값이 중복되지 않게 만드는 방법.
=> unique +  not null 

drop table test01;
create table test01 ( 
 tno int unique not null,
 name char(5) not null
);


insert into test01(name) value('hong');
insert into test01(name) value('hong'); /* ok null 허용하는 컬럼이기 때문 */
insert into test01(name,tno) value('park',2);
insert into test01(name,tno) value('lee',3);
insert into test01(name,tno) value('kim',4);
insert into test01(name,tno) value('cho',5);
insert into test01(name,tno) value('choi',6);


6. 값을 입력하지 않으면 지정한 값으로 자동으로 넣는 방법.
=> default 옵션을 사용한다.

drop table test01;
create table test01 ( 
 tno int unique not null,
 name char(5) /*not null*/ default '홍길동'
);

insert into test01(name,tno) value('park',2);
insert into test01(name,tno) value('lee',3);
insert into test01(tno) value(4);


7. unique 컬럼 중에서, 데이터를 구분할 때 사용할 컬럼은 값이 없어서는 안된다.
 => unique에 not null을 추가하라.
 => 1)) not null 추가 전.
 
 drop table test01;
 create table test01 ( 
 tno int unique,
 name char(5) default '홍길동',
 email char(20) unique
);

insert into test01(tno, name) values(1, '홍길동');
insert into test01(tno, name) values(2, '임꺽정');
insert into test01(name, email) values('강감찬', 'kang@test.com');
insert into test01(name, email) values('이순신', 'lee@test.com');
insert into test01(tno, name) values(2, '오호라');
insert into test01(name, email) values('이순신', 'leae@test.com');
insert into test01(name, email) values('강감찬', 'leae@test.com');
insert into test01(tno, name) values(3, '강감찬');
insert into test01(name) values('강감찬');
insert into test01(name) values('강감찬');
insert into test01(name) values('강감찬');
 
=> 테이블에 들어있는 값 (레코드) 을 구분할 때 사용할 컬럼은 unique여야 한다.
	1) 해당 컬럼의 값이 중복되어서는 안된다.
	2) null을 허용해서는 안된다 ==== > 이유? null을 허용하면 구분할 수 없다.
  
  예) 회원번호를 레코드 구분 컬럼으로 사용한다면, 다음과 같이 선언하라.
 drop table test01;
 create table test01 ( 
 tno int unique not null,
 name char(5) default '홍길동',
 email char(20) unique
);

insert into test01(tno, name) values(1, '홍길동');
insert into test01(tno, name) values(2, '임꺽정');
insert into test01(name, email) values('임꺽정', 'lee@@');
insert into test01(name, email) values('강감찬', 'kang@@'); /* tno 중복 오류*/
insert into test01(tno, name, email) values(3, '이순정', 'lee@@'); /* email 중복 오류*/
 
=> 결론. 
1) 값이 중복되어서는 안되는 컬럼은 unique로 선언한다.
2) 레코드를 구분할 때 사용할 컬럼은 unique + not null 로 선언하라.



8. 레코드를 식별하는 컬럼에 대해 unique not null 대신 단축 문법으로
   primary key 를 사용한다.
   => unique not null 과 같다. 
    근데 왜만들었나? 어느 컬럼이 식별자로 사용 되는지 빠르게 확인할 수 있다.
   => 즉. 눈에 띈다.
   
 drop table test01;
 create table test01 ( 
 tno int primary key,
 name char(5) default '홍길동',
 email char(20) unique
);

insert into test01(tno, name) values(1, '홍길동');
insert into test01(tno, name) values(2, '임꺽정');