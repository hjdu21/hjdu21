
package bitcamp.pms;

import java.io.InputStream;
import java.lang.reflect.Method;
import java.lang.reflect.Parameter;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.regex.Pattern;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import bitcamp.pms.context.ApplicationContext;
import bitcamp.pms.context.request.RequestHandler;
import bitcamp.pms.context.request.RequestHandlerMapping;
import bitcamp.pms.dao.MemberDao;
import bitcamp.pms.domain.Member;

public class ProjectApp {
  static ApplicationContext appContext;
  static RequestHandlerMapping requestHandlerMapping;
  static Scanner keyScan = new Scanner(System.in);

  public static void main(String[] args) throws Exception {
    appContext = new ApplicationContext("bitcamp.pms");
    requestHandlerMapping = new RequestHandlerMapping(appContext);

    appContext.addBean("stdinScan", keyScan);

    try {
      InputStream inputStream = Resources.getResourceAsStream("conf/mybatis-config.xml");
      appContext.addBean("sqlSessionFactory", new SqlSessionFactoryBuilder().build(inputStream));
    } catch (Exception e) {
      System.out.println("Mybatis 준비중 오류 발생. \n 시스템을 종료하겠습니다.");
      e.printStackTrace();
      return;
    }

    login();

    String input;
    do {
      input = prompt();
      processCommand(input);
    } while (!input.equals("quit"));

    keyScan.close();
  }

  static void processCommand(String input) {
    String[] cmds = input.split(" ");

    if (cmds[0].equals("quit")) {
      doQuit();

    } else if (cmds[0].equals("about")) {
      doAbout();

    } else {
      RequestHandler requestHandler = (RequestHandler) requestHandlerMapping.getRequestHandler(cmds[0]);

      if (requestHandler == null) {
        doError();
        return;
      }

      Method method = requestHandler.getMethod();
      Object obj = requestHandler.getObj();
      try {
        ArrayList<Object> args = new ArrayList<>();

        Parameter[] params = method.getParameters();
        Object arg = null;

        for (Parameter param : params) {
          arg = appContext.getBean(param.getType());
          args.add(arg);
        }

        method.invoke(obj, args.toArray());

      } catch (Exception e) {
        System.out.println("명령 처리 중에 오류가 발생했습니다!");
      }
    }
  }

  static String prompt() {
    System.out.print("명령> ");
    return keyScan.nextLine().toLowerCase();
  }

  static void doQuit() {
    System.out.println("안녕히 가세요!");
  }

  static void doError() {
    System.out.println("올바르지 않은 명령어입니다.");
  }

  static void doAbout() {
    System.out.println("비트캠프 80기 프로젝트 관리 시스템!");
  }

  static void login() throws Exception {
    System.out.println("1) 로그인");
    System.out.println("2) 회원가입");

    while (true) {
      System.out.print("선택? ");
      String input = keyScan.nextLine();

      if (input.equals("1")) {
        MemberDao memberDao = (MemberDao) appContext.getBean(MemberDao.class);
        System.out.print("이메일: ");
        input = keyScan.nextLine();
        Member member = memberDao.selectEmail(input);
        System.out.print("암호: ");
        input = keyScan.nextLine();

        if (member == null) {
          System.out.println("등록되지 않은 사용자입니다.");
          continue;
        }
        
        if (input.equals(member.getPassword())) {
          System.out.printf("환영합니다. %s님\n", member.getName());
        } else {
          System.out.println("암호가 맞지 않습니다.");      
        } 
  
        
        
      } else {
        System.out.println("잘못 입력했습니다.");
      }
    }
  }
  static void join() throws Exception {
    if (input.equals("2")) {
      while(true) { 
      Member member = new Member();

      System.out.print("이름?: ");
      member.setName(keyScan.nextLine());

      System.out.print("이메일?: ");
      String regex = "^[_a-zA-Z0-9-\\.]+@[\\.a-zA-Z0-9-]+\\.[a-zA-Z]+$";
      if(!Pattern.matches(regex,keyScan.nextLine().trim())) {
        System.out.println("이메일 형식이 맞지 않습니다. (유효 형식: xxx@xxx.xxx)");
        continue;
      }
      System.out.print("암호?: ");
      if(!keyScan.nextLine().matches("^(?=.*[^a-zA-Z0-9])(?=.*[?!@]).{4,10}$")) {
        System.out.println("암호는 4 ~ 10자 까지만 가능합니다. 최소 알파벳1개, 숫자1개, 특수문자(?,!,@)1개 반드시 포함.");
        continue;
      }
      
      System.out.print("전화?: ");
      if(!Pattern.matches("^((01[1|6|7|8|9])[1-9]+[0-9]{6,7})|(010[1-9][0-9]{7})$", keyScan.nextLine())) {
        System.out.println("전화 번호 형식에 맞지 않습니다.(3~4-4자), (2~4-3~4-4)");
      }
      }
    }
      
  }
}